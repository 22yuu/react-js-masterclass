{"version":3,"sources":["routes/Price.tsx","api.ts","atoms.ts","routes/Chart.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["Overview","styled","div","OverviewItem","Price","tickersData","ath_price","price","market_cap_change_24h","percent_change_30m","percent_change_1h","percent_change_12h","percent_change_24h","BASE_URL","fetchCoins","fetch","then","response","json","isDarkAtom","atom","key","default","Loader","span","Chart","isDark","useRecoilValue","coinId","useParams","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","color","type","series","name","map","x","time_close","y","open","toFixed","high","low","close","options","theme","mode","chart","height","width","toolbar","show","background","stroke","xaxis","axisBorder","axisTicks","grid","tooltip","formatter","value","Container","Header","header","Title","h1","props","accentColor","Description","p","Tabs","Tab","isActive","textColor","BtnHome","Coin","state","useLocation","priceMatch","useMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","loading","Helmet","to","rank","quotes","USD","description","total_supply","max_supply","path","element","CoinList","ul","li","cardBgColor","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","slice","coin","id","src","symbol","toLowerCase","Router","process","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.18dff677.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n  margin-bottom: 10px;\n`;\n\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface IPrice {\n  ath_date: string;\n  ath_price: number;\n  market_cap: number;\n  market_cap_change_24h: number;\n  percent_change_1h: number;\n  percent_change_1y: number;\n  percent_change_6h: number;\n  percent_change_7d: number;\n  percent_change_12h: number;\n  percent_change_15m: number;\n  percent_change_24h: number;\n  percent_change_30d: number;\n  percent_change_30m: number;\n  percent_from_price_ath: number;\n  price: number;\n  volume_24h: number;\n  volume_24h_change_24h: number;\n}\n\ninterface IPriceProps {\n  tickersData?: IPrice;\n}\n\nfunction Price({ tickersData }: IPriceProps) {\n  return (\n    <>\n      <Overview>\n        <OverviewItem>All time High Price:</OverviewItem>\n        <OverviewItem>$ {tickersData?.ath_price}</OverviewItem>\n      </Overview>\n      <Overview>\n        <OverviewItem>Price</OverviewItem>\n        <OverviewItem>$ {tickersData?.price}</OverviewItem>\n      </Overview>\n      <Overview>\n        <OverviewItem>Max Change rate in last 24h:</OverviewItem>\n        <OverviewItem>$ {tickersData?.market_cap_change_24h}</OverviewItem>\n      </Overview>\n      <Overview>\n        <OverviewItem>Change rate (last 30 Minutes):</OverviewItem>\n        <OverviewItem>$ {tickersData?.percent_change_30m}</OverviewItem>\n      </Overview>\n      <Overview>\n        <OverviewItem>Change rate (last 1 hours):</OverviewItem>\n        <OverviewItem>$ {tickersData?.percent_change_1h}</OverviewItem>\n      </Overview>\n      <Overview>\n        <OverviewItem>Change rate (last 12 hours):</OverviewItem>\n        <OverviewItem>$ {tickersData?.percent_change_12h}</OverviewItem>\n      </Overview>\n      <Overview>\n        <OverviewItem>Change rate (last 24 hours):</OverviewItem>\n        <OverviewItem>$ {tickersData?.percent_change_24h}</OverviewItem>\n      </Overview>\n    </>\n  );\n}\n\nexport default Price;\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  // return Promise json data\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2; // 일주일전\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n","import { atom } from \"recoil\";\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: true,\n});\n","import { useQuery } from \"react-query\";\nimport { useOutletContext, useParams } from \"react-router\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\nimport { BeatLoader } from \"react-spinners\";\nimport styled from \"styled-components\";\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\ntype TypeParmas = {\n  coinId: string;\n};\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {}\n\nfunction Chart({}: ChartProps) {\n  const isDark = useRecoilValue(isDarkAtom);\n  const { coinId } = useParams() as TypeParmas;\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        <Loader>\n          <BeatLoader color=\"#9c88ff\" />\n        </Loader>\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            //보내고 싶은 모든 데이터가 들어있음\n            {\n              name: \"price\",\n              data: data?.map((price) => ({\n                x: price.time_close,\n                y: [\n                  price.open.toFixed(2),\n                  price.high.toFixed(2),\n                  price.low.toFixed(2),\n                  price.close.toFixed(2),\n                ],\n              })),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: isDark ? \"dark\" : \"light\",\n            },\n            chart: {\n              type: \"candlestick\",\n              height: 500,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            stroke: {\n              width: 1,\n            },\n            xaxis: {\n              type: \"datetime\",\n              axisBorder: {\n                show: false,\n              },\n              axisTicks: {\n                show: false,\n              },\n            },\n            grid: {\n              show: false,\n            },\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(2)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n","import { Route, useLocation, useParams } from \"react-router\";\nimport { Link, Routes } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Price from \"./Price\";\nimport Chart from \"./Chart\";\nimport { useMatch } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport { Helmet } from \"react-helmet\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { BeatLoader } from \"react-spinners\";\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\n\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\n\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n  }\n`;\n\nconst BtnHome = styled.div`\n  position: absolute;\n  left: 15px;\n`;\n\ninterface IInfodata {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  // tags: ITag[]; // Array 타입일 경우 해당 코드처럼 인터페이스에다가 타입을 설정한다. 이번 예제에서는 사용하지 않으므로 주석처리\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  links: object;\n  links_extended: object;\n  whitepaper: object;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface IPriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\ninterface ICoinProps {}\n\ntype TypeParmas = {\n  coinId: string;\n};\n\nfunction Coin({}: ICoinProps) {\n  const { coinId } = useParams() as TypeParmas;\n  const { state } = useLocation();\n  const priceMatch = useMatch(\"/:coinId/price\");\n  const chartMatch = useMatch(\"/:coinId/chart\");\n  const { isLoading: infoLoading, data: infoData } = useQuery<IInfodata>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId),\n    {\n      refetchInterval: 5000, // 이 쿼리를 5초마다 refetch 한다.\n    }\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<IPriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId)\n  );\n  /*  const [loading, setLoading] = useState(true);\n  const [info, setInfo] = useState<IInfodata>();\n  const [priceInfo, setPriceInfo] = useState<IPriceData>();\n  useEffect(() => {\n    (async () => {\n      // 코인의 정보\n      const coninInfoData = await (\n        await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n      ).json();\n      // console.log(coninInfoData);\n\n      // 코인의 가격 정보\n      const priceData = await (\n        await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n      ).json();\n      // console.log(priceData);\n      setInfo(coninInfoData);\n      setPriceInfo(priceData);\n      setLoading(false);\n    })();\n  }, [coinId]); */\n  const loading = infoLoading || tickersLoading;\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n\n      <Header>\n        <BtnHome>\n          <Link to=\"/\">\n            <FaArrowLeft />\n          </Link>\n        </BtnHome>\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      {loading ? (\n        <Loader>\n          <BeatLoader color=\"#9c88ff\" />\n        </Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price} </span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>max supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n          <Routes>\n            <Route path=\"chart\" element={<Chart />} />\n            <Route\n              path=\"price\"\n              element={<Price tickersData={tickersData?.quotes.USD} />}\n            />\n          </Routes>\n          {/* <Outlet context={{ coinId: coinId }} /> */}\n        </>\n      )}\n    </Container>\n  );\n}\nexport default Coin;\n","import { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { isDarkAtom } from \"../atoms\";\nimport { MdOutlineDarkMode, MdDarkMode } from \"react-icons/md\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst CoinList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.cardBgColor};\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  border: 1px solid white;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const isDark = useRecoilValue(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins); // react query 는 데이터를 지우지않고, 캐시로 저장함\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n        <button onClick={toggleDarkAtom}>\n          {isDark ? <MdOutlineDarkMode /> : <MdDarkMode />}\n        </button>\n      </Header>\n      {isLoading ? (\n        <Loader>\n          <BeatLoader color=\"#9c88ff\" />\n        </Loader>\n      ) : (\n        <CoinList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={`/${coin.id}`}\n                state={{ name: coin.name, rank: coin.rank }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n              {/* a 태그는 새로고침 되므로 Link 사용!*/}\n            </Coin>\n          ))}\n        </CoinList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;\n","import { Routes, Route } from \"react-router-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Chart from \"./routes/Chart\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\nimport Price from \"./routes/Price\";\n\ninterface IRouterProps {}\n\nfunction Router({}: IRouterProps) {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/:coinId/*\" element={<Coin />} />\n        {/* v6부터 자식 라우터를 사용할려면 /*를 붙여야한다. */}\n        {/*\n            아니면 아래의 코드처럼 사용 가능하다. \n            <Route path=\"/:coinId\" element={<Coin />}>\n              <Route path=\"chart\" element={<Chart />} /> \n              <Route path=\"price\" element={<Price />} />\n            <Route>\n            \n            * Chart, Price import 해줘야함\n            자식 Route들이 어디에 render 될지 부모의 element 안에 Outlet을 이용해 표시\n            https://reactrouter.com/docs/en/v6/getting-started/overview 참고\n          */}\n        {/* <Route path=\"/:coinId\" element={<Coin />}>\n          <Route path=\"chart\" element={<Chart />} />\n          <Route path=\"price\" element={<Price />} />\n        </Route> */}\n        <Route path={`${process.env.PUBLIC_URL}/`} element={<Coins />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2d3436\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"white\",\n};\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family:font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor}\n}\na {\n  text-decoration:none;\n  color: inherit;\n}\n`; //렌더링 될 때, 그 컴포넌트는 전역 스코프에 스타일들을 올려준다.\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\n/*\n  React query\n  설치 : npm i react-query\n  React query는 스스로 실행되는 로직들을 축약해줌\n*/\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}